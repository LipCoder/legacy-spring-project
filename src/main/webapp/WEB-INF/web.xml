<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--  배포 서술자  -->
<!--  web.xml은 톰캣 구동과 관련된 설정이 온다.  -->


<!--
    * Context?

    Context를 직역하자면 '문맥'이라는 뜻을 가지고 있다.
    하지만 이것만 가지고는 의미전달이 되지 않는다.

    - C++에선 Print를 위해 PrintContext 객체를 사용
    - Java에선 Applet의 AppletContext를 얻기 위해 Applet.getAppletContext()를 사용

    "즉 Context란 '어떤 객체를 핸들링 하기 위한 접근 수단'의 의미를 가진다."


        ** Context Hierarchy

        Context는 계층구조(부모자식, 상속 관계)를 가질 수 있다.
        root WebApplicationContext 밑에 여러 개의 child WebApplicationContext를
        갖는 것도 가능하다.
-->

<!--
    * contextConfigLocation

    스프링 프레임워크가 동작하기 위한 설정파일의 위치를 알려주는 파라미터
    이를 사용하여 ContextLoader가 load할 설정파일을 직접 지정한다.

-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/spring/applicationContext.xml</param-value>
    </context-param>

<!--
    * ContextLoaderListener

    스프링에서 제공하는 클래스 중 하나로 ContextLoader와 ContextListener를 상속하고 있다.
    서블릿 컨테이너의 생명주기에 맞춰 applicationContext를 servlet attribute에 등록 또는 제거
    하나든 여러개든 명시하여 읽어올 수 있다.

    => 쉽게 말하면 WAS 구동시에 web.xml을 읽어 WebApp 설정을 구성하기 위한 초기세팅작업을 해주는 역할
-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

<!--
    * ServletContext?

    Servlet API에서 제공하는 context로 servlet끼리 공유된다.
    Spring Web MVC에서는 ServletContext가 WebApplicationContext를 가지고 있다.
    (ServletContext가 WebApplicationContext를 감싸는 구조)

    톰캣(서블릿 컨테이너) 실행 시 각 context(WebApp)마다 한 개의 ServletContext 객체를 생성한다.
    컨테이너 종료시 ServletContext 객체 역시 종료된다.
    ServeltContext는 WebApp 실행 시 전체의 공통 자원이나 정보를 미리 바인딩(binding)한다.
    ServletContext의 자원과 정보를 해당 컨테이너에 속하는 모든 Servlet들이 공유하여 사용한다.

    WebApp 하나에 한 개의 ServletContext만 존재한다.
    파일 접근, 자원 바인딩, 로그 파일, 설정 정보 제공 등의 기능을 한다.


    * DispatcherServlet

    웹 관련 처리의 준비작업을 진행한다.

    web.xml(배포서술자) 설정값에 따라 정의되고 매핑된다.
    DispatcherServlet은 WebApplicationContext를 이용하여 자신을 설정한다.

    Context들은 계층으로 구성되어 있기 때문에,
    Servlet Context가 Root Context보다 자식 개념으로 속한다.
    때문에 Servlet Context는 Root Context를 참조 가능하지만, 그 반대는 불가능하다.
-->

    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring/dispatcher-servlet.xml</param-value>
        </init-param>

        <!--  WAS에서 잘못된 URL 요청을 받게되는 경우 이에 대한 에러를 던지겠다  -->
        <init-param>
            <param-name>throwExceptionIfNoHandlerFound</param-name>
            <param-value>true</param-value>
        </init-param>

        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>