
스프링의 특징과 의존성 주입

1. 스프링 프레임워크의 간략한 역사

    프레임워크란?
    : "뼈대, 근간을 이루는 코드들의 묶음"

    여러명이 개발하다보니.. 코드 및 구조에 각자의 스타일이 들어가기 시작
    => 이로 인하여, 협업에 문제가 발생하였음. (가독성 하락, 역량에 따른 코드 이해도 차이로 교육 필요 등)

    프레임워크를 이용한다.
    = 여러명이 개발하는데에 있어서 틀, 환경 그리고 규칙이 미리 적용된 구조를 밑바탕으로 자신만의 코드를 추가한다.

    프레임워크의 장점
    1. 일정한 품질을 보장한다.
    2. 실력이 부족한 개발자라 하더라도 손쉽게 개발이 가능
    3. 완성된 구조에 자신만의 코드만 추가하면 되므로, 생산성이 증대

    비교적 무거웠던 프레임워크에서 탈피하여 경량 프레임워크들이 나오기 시작했다.
    그 중 가장 나중에 나온것이 바로 스프링 프레임워크이다.

    경량 프레임워크?
    : 복잡한 구동 환경과 하드웨어적인 구성이 필요한 프레임워크에 반대되는 개념.
      특정 기능을 jar파일로 묶어 간단히 사용할 수 있게 구성한 프레임워크

    프레임워크의 차별성
    1. 복잡함에 반기를 들고 만들어진 프레임워크
        엔터프라이즈급 프레임워크들은 다양한 기능들을 포용하려다보니, 매우 복잡했다.
        이를 해결하기 위해 나온것이 스프링 경량 프레임워크이다.
        Java 클래스, 인터페이스를 사용하는 구조이기 때문에, 진입장벽이 높지 않고,
        EJB와 같은 프레임워크보다 가벼워 빠르게 엔터프라이즈급 시스템을 구축할 수 있다.

    2. 프로젝트 전체 구조를 설계할 때 유용한 프레임워크
        스프링은 웹, 데이터베이스 등 한 분야에 한정하지 않고, 전체를 설계하는 용도로 사용할 수 있다.
        사실 웹에 가장 많이 사용되기는 하지만, 근본적인 사상 자체는 OOP 구조를 뒷받침하여 구조를 설계하는 사상이다.

    3. 다른 프레임워크들의 포용
        전체 구조에 집중한 특성상 특정 영역의 프레임워크와 공존하는 방식으로 사용할 수 있다.
        다른 프레임워크와 다르게 최소한의 수정으로 특정 프레임워크와 통합시킬 수 있다.
        즉, 기본적인 뼈대를 그대로 유지하며, 여러 종류의 프레임워크를 혼용하여 사용할 수 있다.

    4. 개발 생산성과 개발도구 지원
        이론적으로는 이해해야 할 내용이 어느정도 있을지 몰라도, 결과론적으로 코드 양은 많이 줄었다.
        유지 보수 측면에서도 xml 설정 같은 기능들로 손쉽게 관리할 수 있었다.
        STS, Eclipse, IntelliJ 등의 플러그인의 지원 및 빠른 업데이트 새로운 개발도구로 적응할 필요가 없었다.로


    눈에 띄는 변화가 적용된 스프링 버전
    (그렇다고, 큰 번혁을 한건 아니고, 기존 틀은 유지하고, 편의성 증대 및 개발 트랜드 적용 방향으로 발전)
    * Spring 2.5 버전:
        어노테이션(Annotaion)을 활용하는 설정을 도입하면서, 편리한 설정과 개발이 가능하도록 지원

    * Spring 3.0 버전:
        별도의 설정 없이 Java 클래스만으로 설정 파일을 대신할 수 있게 지원

    * Spring 4.0 버전:
        모바일 환경, 웹 환경에서 많이 사용되는 REST 방식의 컨트롤러 지원

    * Spring 5.0 버전:
        Reactor를 이용한 Reactive 스타일의 개발 환경 지원


2. 스프링의 주요 특징

    * POJO(Plain Old Java Object) 기반의 구성
        POJO는 별도의 API를 이용하지 않고, 객체 간의 관계를 구성할 수 있게 해준다.
        일반적인 Java 코드를 사용하면, 객체를 구성하는 방식을 스프링에 그대로 적용할 수 있다.
        Java 그 자체를 사용함으로써 특정 컨테이너 및 라이브러리에 종속되지 않고, 개발할 수 있게 해주어 유연성이 증가한다.
        또한, 생산성도 증가한다.


    * 의존성 주입(Dependency Injection)과 스프링
        스프링에서 매우 중요한 개념이 바로 의존성 주입이다.

        의존성이란, 하나의 객체가 다른 객체가 없이는 제대로 된 역할을 할 수 없음을 의미한다.
        즉, 객체가 다른 객체의 상태에 그대로 영향을 받는 것을 의미한다.
        (A가 B에 의존적이다 = A는 B 없이는 제대로 동작할 수 없다)

        주입이란, 외부에서 밀어 넣는 것이다.

        의존성과 주입을 결합하여 생각하면, '어떤 객체가 필요한 객체를 외부에서 밀어 넣는다'는 의미가 된다.

        왜 외부에서 객체를 주입하는 방식을 사용하는 것일까?
            '주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없다.'
            '어떤 객체에 의존하든 자신의 역할은 변하지 않는다.'

        외부에서 주입해주는 주체가 필요한데, 스프링은 이것을 만드는 데 적합한 구조로 이루어져 있다.
        스프링에서 ApplicationContext라는 존재가 필요한 객체들을 생성하고, 필요한 객체들을 주입해주는 역할을 한다.

        ApplicationContext를 사용하여, 프로그래머는 객체를 엮는(Wiring) 방식으로 개발한다.
        스프링에서 ApplicationContext가 관리하는 객체들을 Bean(빈)이라고 부른다.
        Bean 사이의 의존관계를 처리하는 방식으로 XML 설정, 어노테이션 설정, Java 설정 방식을 이용할 수 있다.

    * AOP의 지원
        좋은 개발 환경의 주요 원칙
            => '개발자가 비즈니스 로직에만 집중할 수 있게 한다.'

        이를 달성하기 위해서는 여러 원칙이 있겠지만, 가장 중요한 것은 '반복적인 코드의 제거'이다.
        스프링에서는 이러한 반복적인 코드를 줄이고, 핵심 비즈니스 로직에만 집중할 수 있는 방법을 제공한다.

        횡단 관심사(cross-concern)?
            : 대부분 시스템이 공통으로 가지고 있으며 반드시 필요한 기능을 처리하는 것.
              (보안, 로그, 트랜잭션 등)

        스프링은 횡단 관심사를 분리하여 제작하는 것을 가능하게 해준다.
        AOP(Aspect Oriented Programming)은 횡단 관심사를 모듈로 분리하는 프로그래밍 패러다임이다.
        AOP는 AspectJ 문법을 통해 작성할 수 있다.

    * 트랜잭션의 지원
        하나의 업무가 여러 작업으로 이루어지는 경우 트랜잭션 처리가 필요하다.
        이러한 트랜잭션 처리를 코드를 이용해 처리하는 작업은 개발자에게 상당히 피곤한 일이다.
        스프링은 이런 트랜잭션 관리를 어노테이션이나 XML로 설정할 수 있게 해준다.
        이를 통해 매번 상황에 맞는 코드를 작성할 필요가 없도록 설계되었다.
